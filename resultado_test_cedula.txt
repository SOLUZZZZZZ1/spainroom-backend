==== SpainRoom - Test CÃ©dula (Room 1) ==== 
Fecha: 25/08/2025  0:14:16,92 
1) Subida de documento 
 
2) Actualizar estado (admin, VIGENTE) 
<!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Me1ncVn9z8Nz9JVL3i1y";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>sqlalchemy.exc.OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1810712204192">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1967</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1810712209472">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">941</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1810712204352">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1810711982336">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1810712204512">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">178</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))
<span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-1810711982176">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1810712204992">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1810712204832">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">178</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))
<span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-1810712205152">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1810712205312">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1810712205472">
  <h4>File <cite class="filename">"C:\spainroom\backend\app.py"</cite>,
      line <em class="line">278</em>,
      in <code class="function">update_cedula</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return datetime.strptime(s, &#34;%Y-%m-%d&#34;).date()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@app.patch(&#34;/api/rooms/&lt;int:room_id&gt;/cedula&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def update_cedula(room_id: int):</pre>
<pre class="line before"><span class="ws">        </span>role = request.headers.get(&#34;X-Role&#34;, &#34;franquiciado&#34;).lower()</pre>
<pre class="line current"><span class="ws">        </span>room = Room.query.get_or_404(room_id)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>data = request.get_json(force=True) or {}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if room.cedula_locked and role != &#34;admin&#34;:</pre>
<pre class="line after"><span class="ws">            </span>return jsonify({&#34;error&#34;: &#34;La cÃ©dula estÃ¡ bloqueada; solo Admin puede modificarla.&#34;}), 403</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810711982016">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py"</cite>,
      line <em class="line">30</em>,
      in <code class="function">get_or_404</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>error instead of returning ``None``.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:param ident: The primary key to query.</pre>
<pre class="line before"><span class="ws">        </span>:param description: A custom message to show on the error page.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>rv = self.get(ident)
<span class="ws">        </span>     ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if rv is None:</pre>
<pre class="line after"><span class="ws">            </span>abort(404, description=description)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return rv</pre></div>
</div>

<li><div class="frame" id="frame-1810711983136">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">get</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1810712208192">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py"</cite>,
      line <em class="line">386</em>,
      in <code class="function">warned</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>skip_warning = not enable_warnings or kwargs.pop(</pre>
<pre class="line before"><span class="ws">            </span>&#34;_sa_skip_warning&#34;, False</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span>if not skip_warning:</pre>
<pre class="line before"><span class="ws">            </span>_warn_with_version(message, version, wtype, stacklevel=3)</pre>
<pre class="line current"><span class="ws">        </span>return fn(*args, **kwargs)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>doc = func.__doc__ is not None and func.__doc__ or &#34;&#34;</pre>
<pre class="line after"><span class="ws">    </span>if docstring_header is not None:</pre>
<pre class="line after"><span class="ws">        </span>docstring_header %= dict(func=func.__name__)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810711982816">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1127</em>,
      in <code class="function">get</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>self._no_criterion_assertion(&#34;get&#34;, order_by=False, distinct=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># we still implement _get_impl() so that baked query can override</pre>
<pre class="line before"><span class="ws">        </span># it</pre>
<pre class="line current"><span class="ws">        </span>return self._get_impl(ident, loading.load_on_pk_identity)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _get_impl(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>primary_key_identity: _PKIdentityArgument,</pre>
<pre class="line after"><span class="ws">        </span>db_load_fn: Callable[..., Any],</pre></div>
</div>

<li><div class="frame" id="frame-1810712203232">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1136</em>,
      in <code class="function">_get_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>primary_key_identity: _PKIdentityArgument,</pre>
<pre class="line before"><span class="ws">        </span>db_load_fn: Callable[..., Any],</pre>
<pre class="line before"><span class="ws">        </span>identity_token: Optional[Any] = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Optional[Any]:</pre>
<pre class="line before"><span class="ws">        </span>mapper = self._only_full_mapper_zero(&#34;get&#34;)</pre>
<pre class="line current"><span class="ws">        </span>return self.session._get_impl(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>primary_key_identity,</pre>
<pre class="line after"><span class="ws">            </span>db_load_fn,</pre>
<pre class="line after"><span class="ws">            </span>populate_existing=self.load_options._populate_existing,</pre>
<pre class="line after"><span class="ws">            </span>with_for_update=self._for_update_arg,</pre></div>
</div>

<li><div class="frame" id="frame-1810712208032">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">3873</em>,
      in <code class="function">_get_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>with_for_update</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if options:</pre>
<pre class="line before"><span class="ws">            </span>statement = statement.options(*options)</pre>
<pre class="line current"><span class="ws">        </span>return db_load_fn(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>self,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>primary_key_identity,</pre>
<pre class="line after"><span class="ws">            </span>load_options=load_options,</pre>
<pre class="line after"><span class="ws">            </span>identity_token=identity_token,</pre></div>
</div>

<li><div class="frame" id="frame-1810712203392">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py"</cite>,
      line <em class="line">694</em>,
      in <code class="function">load_on_pk_identity</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>execution_options = util.EMPTY_DICT.merge_with(</pre>
<pre class="line before"><span class="ws">        </span>execution_options, {&#34;_sa_orm_load_options&#34;: load_options}</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>result = (</pre>
<pre class="line current"><span class="ws">        </span>session.execute(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>q,</pre>
<pre class="line after"><span class="ws">            </span>params=params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-1810712203552">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2362</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1810712208352">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2247</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1810712208512">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1810712203712">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1418</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810712203872">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">515</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810712204032">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1640</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1810712208832">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1846</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1810712208672">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810712208992">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2355</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1810712209152">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1967</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1810712209312">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">941</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.OperationalError: no such column: rooms.price_eur

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py&#34;, line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py&#34;, line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;C:\spainroom\backend\app.py&#34;, line 278, in update_cedula
    room = Room.query.get_or_404(room_id)
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py&#34;, line 30, in get_or_404
    rv = self.get(ident)
  File &#34;&lt;string&gt;&#34;, line 2, in get
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py&#34;, line 386, in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1127, in get
    return self._get_impl(ident, loading.load_on_pk_identity)
           ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1136, in _get_impl
    return self.session._get_impl(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 3873, in _get_impl
    return db_load_fn(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py&#34;, line 694, in load_on_pk_identity
    session.execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2362, in execute
    return self._execute_internal(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2247, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1418, in execute
    return meth(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 515, in _execute_on_connection
    return connection._execute_clauseelement(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1640, in _execute_clauseelement
    ret = self._execute_context(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1846, in _execute_context
    return self._exec_single_context(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1986, in _exec_single_context
    self._handle_dbapi_exception(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2355, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.OperationalError: no such column: rooms.price_eur

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py", line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py", line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "C:\spainroom\backend\app.py", line 278, in update_cedula
    room = Room.query.get_or_404(room_id)
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py", line 30, in get_or_404
    rv = self.get(ident)
  File "<string>", line 2, in get
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py", line 386, in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py", line 1127, in get
    return self._get_impl(ident, loading.load_on_pk_identity)
           ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py", line 1136, in _get_impl
    return self.session._get_impl(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 3873, in _get_impl
    return db_load_fn(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py", line 694, in load_on_pk_identity
    session.execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2362, in execute
    return self._execute_internal(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2247, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1418, in execute
    return meth(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 515, in _execute_on_connection
    return connection._execute_clauseelement(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1640, in _execute_clauseelement
    ret = self._execute_context(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1846, in _execute_context
    return self._exec_single_context(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1986, in _exec_single_context
    self._handle_dbapi_exception(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2355, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms."availableFrom" AS "rooms_availableFrom", rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->
 
3) VerificaciÃ³n automÃ¡tica 
<!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Me1ncVn9z8Nz9JVL3i1y";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>sqlalchemy.exc.OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1810714362080">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1967</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1810714362240">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">941</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1810712211552">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1810712211392">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1810712210112">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">178</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))
<span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-1810712211232">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1810712211872">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1810712211712">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">178</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))
<span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-1810712212192">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1810712212352">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1810712212512">
  <h4>File <cite class="filename">"C:\spainroom\backend\app.py"</cite>,
      line <em class="line">369</em>,
      in <code class="function">verify_cedula</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#34;ok&#34;: True, &#34;doc_url&#34;: room.cedula_doc_url})</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@app.post(&#34;/api/rooms/&lt;int:room_id&gt;/cedula/verify&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def verify_cedula(room_id: int):</pre>
<pre class="line current"><span class="ws">        </span>room = Room.query.get_or_404(room_id)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if not room.cedula_doc_url:</pre>
<pre class="line after"><span class="ws">            </span>return jsonify({&#34;error&#34;: &#34;No hay documento cargado&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>now_date = datetime.utcnow().date()</pre>
<pre class="line after"><span class="ws">        </span>auto_reason = None</pre></div>
</div>

<li><div class="frame" id="frame-1810712212832">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py"</cite>,
      line <em class="line">30</em>,
      in <code class="function">get_or_404</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>error instead of returning ``None``.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:param ident: The primary key to query.</pre>
<pre class="line before"><span class="ws">        </span>:param description: A custom message to show on the error page.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>rv = self.get(ident)
<span class="ws">        </span>     ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if rv is None:</pre>
<pre class="line after"><span class="ws">            </span>abort(404, description=description)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return rv</pre></div>
</div>

<li><div class="frame" id="frame-1810712212992">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">get</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1810712213152">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py"</cite>,
      line <em class="line">386</em>,
      in <code class="function">warned</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>skip_warning = not enable_warnings or kwargs.pop(</pre>
<pre class="line before"><span class="ws">            </span>&#34;_sa_skip_warning&#34;, False</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span>if not skip_warning:</pre>
<pre class="line before"><span class="ws">            </span>_warn_with_version(message, version, wtype, stacklevel=3)</pre>
<pre class="line current"><span class="ws">        </span>return fn(*args, **kwargs)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>doc = func.__doc__ is not None and func.__doc__ or &#34;&#34;</pre>
<pre class="line after"><span class="ws">    </span>if docstring_header is not None:</pre>
<pre class="line after"><span class="ws">        </span>docstring_header %= dict(func=func.__name__)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810712213312">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1127</em>,
      in <code class="function">get</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>self._no_criterion_assertion(&#34;get&#34;, order_by=False, distinct=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># we still implement _get_impl() so that baked query can override</pre>
<pre class="line before"><span class="ws">        </span># it</pre>
<pre class="line current"><span class="ws">        </span>return self._get_impl(ident, loading.load_on_pk_identity)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _get_impl(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>primary_key_identity: _PKIdentityArgument,</pre>
<pre class="line after"><span class="ws">        </span>db_load_fn: Callable[..., Any],</pre></div>
</div>

<li><div class="frame" id="frame-1810712213472">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1136</em>,
      in <code class="function">_get_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>primary_key_identity: _PKIdentityArgument,</pre>
<pre class="line before"><span class="ws">        </span>db_load_fn: Callable[..., Any],</pre>
<pre class="line before"><span class="ws">        </span>identity_token: Optional[Any] = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Optional[Any]:</pre>
<pre class="line before"><span class="ws">        </span>mapper = self._only_full_mapper_zero(&#34;get&#34;)</pre>
<pre class="line current"><span class="ws">        </span>return self.session._get_impl(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>primary_key_identity,</pre>
<pre class="line after"><span class="ws">            </span>db_load_fn,</pre>
<pre class="line after"><span class="ws">            </span>populate_existing=self.load_options._populate_existing,</pre>
<pre class="line after"><span class="ws">            </span>with_for_update=self._for_update_arg,</pre></div>
</div>

<li><div class="frame" id="frame-1810712213632">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">3873</em>,
      in <code class="function">_get_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>with_for_update</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if options:</pre>
<pre class="line before"><span class="ws">            </span>statement = statement.options(*options)</pre>
<pre class="line current"><span class="ws">        </span>return db_load_fn(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>self,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>primary_key_identity,</pre>
<pre class="line after"><span class="ws">            </span>load_options=load_options,</pre>
<pre class="line after"><span class="ws">            </span>identity_token=identity_token,</pre></div>
</div>

<li><div class="frame" id="frame-1810712213792">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py"</cite>,
      line <em class="line">694</em>,
      in <code class="function">load_on_pk_identity</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>execution_options = util.EMPTY_DICT.merge_with(</pre>
<pre class="line before"><span class="ws">        </span>execution_options, {&#34;_sa_orm_load_options&#34;: load_options}</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>result = (</pre>
<pre class="line current"><span class="ws">        </span>session.execute(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>q,</pre>
<pre class="line after"><span class="ws">            </span>params=params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-1810712213952">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2362</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1810712214112">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2247</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1810712214272">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1810712214432">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1418</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810712214592">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">515</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810712214752">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1640</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1810712214912">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1846</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1810712215072">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810712215232">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2355</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1810712215392">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1967</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1810714361920">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">941</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.OperationalError: no such column: rooms.price_eur

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py&#34;, line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py&#34;, line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;C:\spainroom\backend\app.py&#34;, line 369, in verify_cedula
    room = Room.query.get_or_404(room_id)
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py&#34;, line 30, in get_or_404
    rv = self.get(ident)
  File &#34;&lt;string&gt;&#34;, line 2, in get
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py&#34;, line 386, in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1127, in get
    return self._get_impl(ident, loading.load_on_pk_identity)
           ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1136, in _get_impl
    return self.session._get_impl(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 3873, in _get_impl
    return db_load_fn(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py&#34;, line 694, in load_on_pk_identity
    session.execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2362, in execute
    return self._execute_internal(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2247, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1418, in execute
    return meth(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 515, in _execute_on_connection
    return connection._execute_clauseelement(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1640, in _execute_clauseelement
    ret = self._execute_context(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1846, in _execute_context
    return self._exec_single_context(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1986, in _exec_single_context
    self._handle_dbapi_exception(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2355, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.OperationalError: no such column: rooms.price_eur

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py", line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py", line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "C:\spainroom\backend\app.py", line 369, in verify_cedula
    room = Room.query.get_or_404(room_id)
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py", line 30, in get_or_404
    rv = self.get(ident)
  File "<string>", line 2, in get
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py", line 386, in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py", line 1127, in get
    return self._get_impl(ident, loading.load_on_pk_identity)
           ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py", line 1136, in _get_impl
    return self.session._get_impl(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 3873, in _get_impl
    return db_load_fn(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py", line 694, in load_on_pk_identity
    session.execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2362, in execute
    return self._execute_internal(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2247, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1418, in execute
    return meth(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 515, in _execute_on_connection
    return connection._execute_clauseelement(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1640, in _execute_clauseelement
    ret = self._execute_context(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1846, in _execute_context
    return self._exec_single_context(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1986, in _exec_single_context
    self._handle_dbapi_exception(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2355, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms."availableFrom" AS "rooms_availableFrom", rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->
 
4) DecisiÃ³n manual (Admin VERIFIED) 
<!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Me1ncVn9z8Nz9JVL3i1y";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>sqlalchemy.exc.OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1810714368320">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1967</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1810714368480">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">941</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1810714364000">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1810714363840">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1810714362560">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">178</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))
<span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-1810714363680">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1810714364320">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1810714364160">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">178</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))
<span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-1810714364800">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1810714364960">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1810714365120">
  <h4>File <cite class="filename">"C:\spainroom\backend\app.py"</cite>,
      line <em class="line">398</em>,
      in <code class="function">decide_cedula</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>@app.post(&#34;/api/rooms/&lt;int:room_id&gt;/cedula/decision&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def decide_cedula(room_id: int):</pre>
<pre class="line before"><span class="ws">        </span>role = request.headers.get(&#34;X-Role&#34;, &#34;franquiciado&#34;).lower()</pre>
<pre class="line before"><span class="ws">        </span>if role != &#34;admin&#34;:</pre>
<pre class="line before"><span class="ws">            </span>return jsonify({&#34;error&#34;: &#34;Solo Admin puede decidir manualmente&#34;}), 403</pre>
<pre class="line current"><span class="ws">        </span>room = Room.query.get_or_404(room_id)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>data = request.get_json(force=True) or {}</pre>
<pre class="line after"><span class="ws">        </span>decision = (data.get(&#34;decision&#34;) or &#34;&#34;).upper()</pre>
<pre class="line after"><span class="ws">        </span>reason = (data.get(&#34;reason&#34;) or &#34;&#34;).strip() or None</pre>
<pre class="line after"><span class="ws">        </span>if decision not in {&#34;VERIFIED&#34;, &#34;REJECTED&#34;, &#34;NEEDS_REVIEW&#34;}:</pre>
<pre class="line after"><span class="ws">            </span>return jsonify({&#34;error&#34;: &#34;DecisiÃ³n invÃ¡lida&#34;}), 400</pre></div>
</div>

<li><div class="frame" id="frame-1810714365440">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py"</cite>,
      line <em class="line">30</em>,
      in <code class="function">get_or_404</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>error instead of returning ``None``.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:param ident: The primary key to query.</pre>
<pre class="line before"><span class="ws">        </span>:param description: A custom message to show on the error page.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>rv = self.get(ident)
<span class="ws">        </span>     ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if rv is None:</pre>
<pre class="line after"><span class="ws">            </span>abort(404, description=description)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return rv</pre></div>
</div>

<li><div class="frame" id="frame-1810714365600">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">get</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1810714365760">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py"</cite>,
      line <em class="line">386</em>,
      in <code class="function">warned</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>skip_warning = not enable_warnings or kwargs.pop(</pre>
<pre class="line before"><span class="ws">            </span>&#34;_sa_skip_warning&#34;, False</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span>if not skip_warning:</pre>
<pre class="line before"><span class="ws">            </span>_warn_with_version(message, version, wtype, stacklevel=3)</pre>
<pre class="line current"><span class="ws">        </span>return fn(*args, **kwargs)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>doc = func.__doc__ is not None and func.__doc__ or &#34;&#34;</pre>
<pre class="line after"><span class="ws">    </span>if docstring_header is not None:</pre>
<pre class="line after"><span class="ws">        </span>docstring_header %= dict(func=func.__name__)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810714365920">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1127</em>,
      in <code class="function">get</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>self._no_criterion_assertion(&#34;get&#34;, order_by=False, distinct=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># we still implement _get_impl() so that baked query can override</pre>
<pre class="line before"><span class="ws">        </span># it</pre>
<pre class="line current"><span class="ws">        </span>return self._get_impl(ident, loading.load_on_pk_identity)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _get_impl(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>primary_key_identity: _PKIdentityArgument,</pre>
<pre class="line after"><span class="ws">        </span>db_load_fn: Callable[..., Any],</pre></div>
</div>

<li><div class="frame" id="frame-1810714366080">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1136</em>,
      in <code class="function">_get_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>primary_key_identity: _PKIdentityArgument,</pre>
<pre class="line before"><span class="ws">        </span>db_load_fn: Callable[..., Any],</pre>
<pre class="line before"><span class="ws">        </span>identity_token: Optional[Any] = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Optional[Any]:</pre>
<pre class="line before"><span class="ws">        </span>mapper = self._only_full_mapper_zero(&#34;get&#34;)</pre>
<pre class="line current"><span class="ws">        </span>return self.session._get_impl(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>primary_key_identity,</pre>
<pre class="line after"><span class="ws">            </span>db_load_fn,</pre>
<pre class="line after"><span class="ws">            </span>populate_existing=self.load_options._populate_existing,</pre>
<pre class="line after"><span class="ws">            </span>with_for_update=self._for_update_arg,</pre></div>
</div>

<li><div class="frame" id="frame-1810714366240">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">3873</em>,
      in <code class="function">_get_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>with_for_update</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if options:</pre>
<pre class="line before"><span class="ws">            </span>statement = statement.options(*options)</pre>
<pre class="line current"><span class="ws">        </span>return db_load_fn(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>self,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>primary_key_identity,</pre>
<pre class="line after"><span class="ws">            </span>load_options=load_options,</pre>
<pre class="line after"><span class="ws">            </span>identity_token=identity_token,</pre></div>
</div>

<li><div class="frame" id="frame-1810714366400">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py"</cite>,
      line <em class="line">694</em>,
      in <code class="function">load_on_pk_identity</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>execution_options = util.EMPTY_DICT.merge_with(</pre>
<pre class="line before"><span class="ws">        </span>execution_options, {&#34;_sa_orm_load_options&#34;: load_options}</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>result = (</pre>
<pre class="line current"><span class="ws">        </span>session.execute(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>q,</pre>
<pre class="line after"><span class="ws">            </span>params=params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-1810714366560">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2362</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1810714366720">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2247</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1810714366880">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1810714367040">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1418</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810714367200">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">515</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810714367360">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1640</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1810714367520">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1846</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1810714367680">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810714367840">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2355</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1810714368000">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1967</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1810714368160">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">941</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.OperationalError: no such column: rooms.price_eur

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py&#34;, line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py&#34;, line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;C:\spainroom\backend\app.py&#34;, line 398, in decide_cedula
    room = Room.query.get_or_404(room_id)
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py&#34;, line 30, in get_or_404
    rv = self.get(ident)
  File &#34;&lt;string&gt;&#34;, line 2, in get
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py&#34;, line 386, in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1127, in get
    return self._get_impl(ident, loading.load_on_pk_identity)
           ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1136, in _get_impl
    return self.session._get_impl(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 3873, in _get_impl
    return db_load_fn(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py&#34;, line 694, in load_on_pk_identity
    session.execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2362, in execute
    return self._execute_internal(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2247, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1418, in execute
    return meth(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 515, in _execute_on_connection
    return connection._execute_clauseelement(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1640, in _execute_clauseelement
    ret = self._execute_context(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1846, in _execute_context
    return self._exec_single_context(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1986, in _exec_single_context
    self._handle_dbapi_exception(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2355, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.OperationalError: no such column: rooms.price_eur

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py", line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py", line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "C:\spainroom\backend\app.py", line 398, in decide_cedula
    room = Room.query.get_or_404(room_id)
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py", line 30, in get_or_404
    rv = self.get(ident)
  File "<string>", line 2, in get
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py", line 386, in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py", line 1127, in get
    return self._get_impl(ident, loading.load_on_pk_identity)
           ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py", line 1136, in _get_impl
    return self.session._get_impl(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 3873, in _get_impl
    return db_load_fn(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py", line 694, in load_on_pk_identity
    session.execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2362, in execute
    return self._execute_internal(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2247, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1418, in execute
    return meth(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 515, in _execute_on_connection
    return connection._execute_clauseelement(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1640, in _execute_clauseelement
    ret = self._execute_context(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1846, in _execute_context
    return self._exec_single_context(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1986, in _exec_single_context
    self._handle_dbapi_exception(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2355, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms."availableFrom" AS "rooms_availableFrom", rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->
 
5) AuditorÃ­a (Ãºltimos 20 eventos) 
<!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Me1ncVn9z8Nz9JVL3i1y";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>sqlalchemy.exc.OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1810714374560">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1967</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1810714374720">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">941</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1810714370240">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1810714370080">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1810714368800">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">178</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))
<span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-1810714369920">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1810714370560">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1810714370400">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">178</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))
<span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-1810714371040">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1810714371200">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1810714371360">
  <h4>File <cite class="filename">"C:\spainroom\backend\app.py"</cite>,
      line <em class="line">419</em>,
      in <code class="function">room_audit</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#34;ok&#34;: True, &#34;verification&#34;: decision})</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@app.get(&#34;/api/rooms/&lt;int:room_id&gt;/audit&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def room_audit(room_id: int):</pre>
<pre class="line current"><span class="ws">        </span>Room.query.get_or_404(room_id)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>limit = int(request.args.get(&#34;limit&#34;, 100))</pre>
<pre class="line after"><span class="ws">        </span>items = AuditEvent.query.filter_by(room_id=room_id)\</pre>
<pre class="line after"><span class="ws">            </span>.order_by(AuditEvent.ts.desc())\</pre>
<pre class="line after"><span class="ws">            </span>.limit(min(limit, 500)).all()</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810714371680">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py"</cite>,
      line <em class="line">30</em>,
      in <code class="function">get_or_404</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>error instead of returning ``None``.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:param ident: The primary key to query.</pre>
<pre class="line before"><span class="ws">        </span>:param description: A custom message to show on the error page.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>rv = self.get(ident)
<span class="ws">        </span>     ^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if rv is None:</pre>
<pre class="line after"><span class="ws">            </span>abort(404, description=description)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return rv</pre></div>
</div>

<li><div class="frame" id="frame-1810714371840">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">get</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1810714372000">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py"</cite>,
      line <em class="line">386</em>,
      in <code class="function">warned</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>skip_warning = not enable_warnings or kwargs.pop(</pre>
<pre class="line before"><span class="ws">            </span>&#34;_sa_skip_warning&#34;, False</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span>if not skip_warning:</pre>
<pre class="line before"><span class="ws">            </span>_warn_with_version(message, version, wtype, stacklevel=3)</pre>
<pre class="line current"><span class="ws">        </span>return fn(*args, **kwargs)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>doc = func.__doc__ is not None and func.__doc__ or &#34;&#34;</pre>
<pre class="line after"><span class="ws">    </span>if docstring_header is not None:</pre>
<pre class="line after"><span class="ws">        </span>docstring_header %= dict(func=func.__name__)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810714372160">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1127</em>,
      in <code class="function">get</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>self._no_criterion_assertion(&#34;get&#34;, order_by=False, distinct=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># we still implement _get_impl() so that baked query can override</pre>
<pre class="line before"><span class="ws">        </span># it</pre>
<pre class="line current"><span class="ws">        </span>return self._get_impl(ident, loading.load_on_pk_identity)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _get_impl(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>primary_key_identity: _PKIdentityArgument,</pre>
<pre class="line after"><span class="ws">        </span>db_load_fn: Callable[..., Any],</pre></div>
</div>

<li><div class="frame" id="frame-1810714372320">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">1136</em>,
      in <code class="function">_get_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>primary_key_identity: _PKIdentityArgument,</pre>
<pre class="line before"><span class="ws">        </span>db_load_fn: Callable[..., Any],</pre>
<pre class="line before"><span class="ws">        </span>identity_token: Optional[Any] = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Optional[Any]:</pre>
<pre class="line before"><span class="ws">        </span>mapper = self._only_full_mapper_zero(&#34;get&#34;)</pre>
<pre class="line current"><span class="ws">        </span>return self.session._get_impl(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>primary_key_identity,</pre>
<pre class="line after"><span class="ws">            </span>db_load_fn,</pre>
<pre class="line after"><span class="ws">            </span>populate_existing=self.load_options._populate_existing,</pre>
<pre class="line after"><span class="ws">            </span>with_for_update=self._for_update_arg,</pre></div>
</div>

<li><div class="frame" id="frame-1810714372480">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">3873</em>,
      in <code class="function">_get_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>with_for_update</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if options:</pre>
<pre class="line before"><span class="ws">            </span>statement = statement.options(*options)</pre>
<pre class="line current"><span class="ws">        </span>return db_load_fn(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>self,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>primary_key_identity,</pre>
<pre class="line after"><span class="ws">            </span>load_options=load_options,</pre>
<pre class="line after"><span class="ws">            </span>identity_token=identity_token,</pre></div>
</div>

<li><div class="frame" id="frame-1810714372640">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py"</cite>,
      line <em class="line">694</em>,
      in <code class="function">load_on_pk_identity</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>execution_options = util.EMPTY_DICT.merge_with(</pre>
<pre class="line before"><span class="ws">        </span>execution_options, {&#34;_sa_orm_load_options&#34;: load_options}</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>result = (</pre>
<pre class="line current"><span class="ws">        </span>session.execute(
<span class="ws">        </span>^</pre>
<pre class="line after"><span class="ws">            </span>q,</pre>
<pre class="line after"><span class="ws">            </span>params=params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-1810714372800">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2362</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1810714372960">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2247</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1810714373120">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1810714373280">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1418</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810714373440">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">515</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810714373600">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1640</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1810714373760">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1846</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1810714373920">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1986</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1810714374080">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2355</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1810714374240">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1967</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1810714374400">
  <h4>File <cite class="filename">"C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">941</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.OperationalError: no such column: rooms.price_eur

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py&#34;, line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py&#34;, line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;C:\spainroom\backend\app.py&#34;, line 419, in room_audit
    Room.query.get_or_404(room_id)
    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py&#34;, line 30, in get_or_404
    rv = self.get(ident)
  File &#34;&lt;string&gt;&#34;, line 2, in get
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py&#34;, line 386, in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1127, in get
    return self._get_impl(ident, loading.load_on_pk_identity)
           ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 1136, in _get_impl
    return self.session._get_impl(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 3873, in _get_impl
    return db_load_fn(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py&#34;, line 694, in load_on_pk_identity
    session.execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2362, in execute
    return self._execute_internal(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2247, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1418, in execute
    return meth(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 515, in _execute_on_connection
    return connection._execute_clauseelement(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1640, in _execute_clauseelement
    ret = self._execute_context(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1846, in _execute_context
    return self._exec_single_context(
    
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1986, in _exec_single_context
    self._handle_dbapi_exception(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2355, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File &#34;C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms.&#34;availableFrom&#34; AS &#34;rooms_availableFrom&#34;, rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.OperationalError: no such column: rooms.price_eur

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py", line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_cors\extension.py", line 178, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "C:\spainroom\backend\app.py", line 419, in room_audit
    Room.query.get_or_404(room_id)
    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_sqlalchemy\query.py", line 30, in get_or_404
    rv = self.get(ident)
  File "<string>", line 2, in get
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py", line 386, in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py", line 1127, in get
    return self._get_impl(ident, loading.load_on_pk_identity)
           ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py", line 1136, in _get_impl
    return self.session._get_impl(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 3873, in _get_impl
    return db_load_fn(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py", line 694, in load_on_pk_identity
    session.execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2362, in execute
    return self._execute_internal(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2247, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1418, in execute
    return meth(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 515, in _execute_on_connection
    return connection._execute_clauseelement(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1640, in _execute_clauseelement
    ret = self._execute_context(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1846, in _execute_context
    return self._exec_single_context(
    
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1986, in _exec_single_context
    self._handle_dbapi_exception(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2355, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1967, in _exec_single_context
    self.dialect.do_execute(
    ^
  File "C:\Users\soluz\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 941, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: rooms.price_eur
[SQL: SELECT rooms.id AS rooms_id, rooms.title AS rooms_title, rooms.price_eur AS rooms_price_eur, rooms.city AS rooms_city, rooms.images AS rooms_images, rooms.size_m2 AS rooms_size_m2, rooms.features AS rooms_features, rooms."availableFrom" AS "rooms_availableFrom", rooms.created_at AS rooms_created_at, rooms.updated_at AS rooms_updated_at, rooms.cedula_status AS rooms_cedula_status, rooms.cedula_ref AS rooms_cedula_ref, rooms.cedula_expiry AS rooms_cedula_expiry, rooms.cedula_locked AS rooms_cedula_locked, rooms.cedula_verification AS rooms_cedula_verification, rooms.cedula_doc_url AS rooms_cedula_doc_url, rooms.cedula_doc_hash AS rooms_cedula_doc_hash, rooms.cedula_issuer AS rooms_cedula_issuer, rooms.cedula_issue_date AS rooms_cedula_issue_date, rooms.cedula_last_check AS rooms_cedula_last_check, rooms.cedula_reason AS rooms_cedula_reason 
FROM rooms 
WHERE rooms.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->
 
